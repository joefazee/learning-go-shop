basePath: /api/v1
definitions:
  github_com_joefazee_learning-go-shop_internal_dto.AddToCartRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.AuthResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.UserResponse'
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.CartItemResponse:
    properties:
      id:
        type: integer
      product:
        $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.ProductResponse'
      quantity:
        type: integer
      subtotal:
        type: number
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.CartResponse:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CartItemResponse'
        type: array
      id:
        type: integer
      total:
        type: number
      user_id:
        type: integer
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.CategoryResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      name:
        type: string
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.CreateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.CreateProductRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        minimum: 0
        type: integer
    required:
    - category_id
    - name
    - price
    - sku
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.OrderItemResponse:
    properties:
      id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.ProductResponse'
      quantity:
        type: integer
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.OrderResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      order_items:
        items:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.OrderItemResponse'
        type: array
      status:
        type: string
      total_amount:
        type: number
      user_id:
        type: integer
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.ProductImageResponse:
    properties:
      alt_text:
        type: string
      id:
        type: integer
      is_primary:
        type: boolean
      url:
        type: string
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.ProductResponse:
    properties:
      category:
        $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CategoryResponse'
      category_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.ProductImageResponse'
        type: array
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.UpdateCartItemRequest:
    properties:
      quantity:
        minimum: 1
        type: integer
    required:
    - quantity
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.UpdateCategoryRequest:
    properties:
      description:
        type: string
      is_active:
        type: boolean
      name:
        type: string
    required:
    - name
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.UpdateProductRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category_id
    - name
    - price
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.UpdateProfileRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
    required:
    - first_name
    - last_name
    type: object
  github_com_joefazee_learning-go-shop_internal_dto.UserResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  github_com_joefazee_learning-go-shop_internal_utils.PaginatedResponse:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      meta:
        $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.PaginationMeta'
      success:
        type: boolean
    type: object
  github_com_joefazee_learning-go-shop_internal_utils.PaginationMeta:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  github_com_joefazee_learning-go-shop_internal_utils.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: no-email@no-email
    name: Joseph Abah
    url: http://linkedin.com/in/abahjoseph
  description: A modern e-commerce API built with Go, Gin, and GORM
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E-Commerce API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.AuthResponse'
              type: object
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate refresh token and logout user
      parameters:
      - description: Refresh token to invalidate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      summary: User logout
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.AuthResponse'
              type: object
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.AuthResponse'
              type: object
        "400":
          description: Invalid request data or user already exists
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      summary: Register a new user
      tags:
      - Authentication
  /cart:
    get:
      description: Retrieve current user's shopping cart with all items
      produces:
      - application/json
      responses:
        "200":
          description: Cart retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CartResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Get user's cart
      tags:
      - Cart
  /cart/items:
    post:
      consumes:
      - application/json
      description: Add a product to the user's shopping cart
      parameters:
      - description: Item to add to cart
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added to cart successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CartResponse'
              type: object
        "400":
          description: Invalid request data or insufficient stock
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Add item to cart
      tags:
      - Cart
  /cart/items/{id}:
    delete:
      description: Remove an item from the user's shopping cart
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Item removed from cart successfully
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "400":
          description: Invalid cart item ID
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Remove item from cart
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Update the quantity of an item in the user's cart
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: New quantity
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.UpdateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cart item updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CartResponse'
              type: object
        "400":
          description: Invalid request data or insufficient stock
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Update cart item quantity
      tags:
      - Cart
  /categories:
    get:
      description: Retrieve all active categories
      produces:
      - application/json
      responses:
        "200":
          description: Categories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CategoryResponse'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new product category (Admin only)
      parameters:
      - description: Category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Category created successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CategoryResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - Categories
  /categories/{id}:
    delete:
      description: Delete a category (Admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Category deleted successfully
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update an existing category (Admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Category updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CategoryResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - Categories
  /orders:
    get:
      description: Retrieve paginated list of user's orders
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.OrderResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Get user's orders
      tags:
      - Orders
    post:
      description: Create an order from the current user's cart
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.OrderResponse'
              type: object
        "400":
          description: Cart is empty or insufficient stock
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Create an order
      tags:
      - Orders
  /orders/{id}:
    get:
      description: Retrieve detailed information about a specific order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.OrderResponse'
              type: object
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - Orders
  /products:
    get:
      description: Retrieve paginated list of active products
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.ProductResponse'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product (Admin only)
      parameters:
      - description: Product data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.ProductResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      description: Retrieve detailed information about a specific product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.ProductResponse'
              type: object
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      summary: Get a product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update an existing product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.ProductResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Products
  /products/{id}/images:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image for a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Image uploaded successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Invalid request or file
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Upload product image
      tags:
      - Products
  /users/profile:
    get:
      description: Get current authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update current authenticated user's profile information
      parameters:
      - description: Profile update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_dto.UserResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_joefazee_learning-go-shop_internal_utils.Response'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
