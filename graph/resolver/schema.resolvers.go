package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/joefazee/learning-go-shop/graph"
	"github.com/joefazee/learning-go-shop/graph/model"
	"github.com/joefazee/learning-go-shop/internal/dto"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input dto.RegisterRequest) (*dto.AuthResponse, error) {
	response, err := r.authService.Register(&input)
	if err != nil {
		return nil, fmt.Errorf("registration failed: %w", err)
	}

	return response, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input dto.LoginRequest) (*dto.AuthResponse, error) {
	response, err := r.authService.Login(&input)
	if err != nil {
		return nil, fmt.Errorf("login failed: %w", err)
	}

	return response, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input dto.RefreshTokenRequest) (*dto.AuthResponse, error) {
	response, err := r.authService.RefreshToken(&input)
	if err != nil {
		return nil, fmt.Errorf("token refresh failed: %w", err)
	}

	return response, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context, input dto.RefreshTokenRequest) (bool, error) {
	err := r.authService.Logout(input.RefreshToken)
	if err != nil {
		return false, fmt.Errorf("logout failed: %w", err)
	}

	return true, nil
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input dto.UpdateProfileRequest) (*dto.UserResponse, error) {
	userID, err := GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.userService.UpdateProfile(userID, &input)
	if err != nil {
		return nil, fmt.Errorf("failed to update profile: %w", err)
	}

	return user, nil
}

// CreateCategory is the resolver for the createCategory field. - Admin action
func (r *mutationResolver) CreateCategory(ctx context.Context, input dto.CreateCategoryRequest) (*dto.CategoryResponse, error) {
	if !IsAdminFromContext(ctx) {
		return nil, ErrUnauthorized
	}

	category, err := r.productService.CreateCategory(&input)
	if err != nil {
		return nil, fmt.Errorf("failed to create category: %w", err)
	}

	return category, nil
}

// UpdateCategory is the resolver for the updateCategory field. - Admin action
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, input dto.UpdateCategoryRequest) (*dto.CategoryResponse, error) {
	if !IsAdminFromContext(ctx) {
		return nil, ErrUnauthorized
	}

	categoryID, err := r.parseID(id)
	if err != nil {
		return nil, fmt.Errorf("invalid category ID: %w", err)
	}

	category, err := r.productService.UpdateCategory(categoryID, &input)
	if err != nil {
		return nil, fmt.Errorf("failed to update category: %w", err)
	}

	return category, nil
}

// DeleteCategory is the resolver for the deleteCategory field. - Admin action
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	if !IsAdminFromContext(ctx) {
		return false, ErrUnauthorized
	}

	categoryID, err := r.parseID(id)
	if err != nil {
		return false, fmt.Errorf("invalid category ID: %w", err)
	}

	err = r.productService.DeleteCategory(categoryID)
	if err != nil {
		return false, fmt.Errorf("failed to delete category: %w", err)
	}

	return true, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input dto.CreateProductRequest) (*dto.ProductResponse, error) {
	if !IsAdminFromContext(ctx) {
		return nil, ErrUnauthorized
	}

	product, err := r.productService.CreateProduct(&input)
	if err != nil {
		return nil, fmt.Errorf("failed to create product: %w", err)
	}

	return product, nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input dto.UpdateProductRequest) (*dto.ProductResponse, error) {
	if !IsAdminFromContext(ctx) {
		return nil, ErrUnauthorized
	}

	productID, err := r.parseID(id)
	if err != nil {
		return nil, fmt.Errorf("invalid product ID: %w", err)
	}

	product, err := r.productService.UpdateProduct(productID, &input)
	if err != nil {
		return nil, fmt.Errorf("failed to update product: %w", err)
	}

	return product, nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	if !IsAdminFromContext(ctx) {
		return false, ErrUnauthorized
	}

	productID, err := r.parseID(id)
	if err != nil {
		return false, fmt.Errorf("invalid product ID: %w", err)
	}

	err = r.productService.DeleteProduct(productID)
	if err != nil {
		return false, fmt.Errorf("failed to delete product: %w", err)
	}

	return true, nil
}

// AddToCart is the resolver for the addToCart field.
func (r *mutationResolver) AddToCart(ctx context.Context, input dto.AddToCartRequest) (*dto.CartResponse, error) {
	userID, err := GetUserIDFromContext(ctx)
	if err != nil {
		return nil, ErrUnauthorized
	}

	cart, err := r.cartService.AddToCart(userID, &input)
	if err != nil {
		return nil, fmt.Errorf("failed to add to cart: %w", err)
	}

	return cart, nil
}

// UpdateCartItem is the resolver for the updateCartItem field.
func (r *mutationResolver) UpdateCartItem(ctx context.Context, id string, input dto.UpdateCartItemRequest) (*dto.CartResponse, error) {
	userID, err := GetUserIDFromContext(ctx)
	if err != nil {
		return nil, ErrUnauthorized
	}

	itemID, err := r.parseID(id)
	if err != nil {
		return nil, fmt.Errorf("invalid item ID: %w", err)
	}

	cart, err := r.cartService.UpdateCartItem(userID, itemID, &input)
	if err != nil {
		return nil, fmt.Errorf("failed to update cart item: %w", err)
	}

	return cart, nil
}

// RemoveFromCart is the resolver for the removeFromCart field.
func (r *mutationResolver) RemoveFromCart(ctx context.Context, id string) (bool, error) {
	userID, err := GetUserIDFromContext(ctx)
	if err != nil {
		return false, ErrUnauthorized
	}

	itemID, err := r.parseID(id)
	if err != nil {
		return false, fmt.Errorf("invalid item ID: %w", err)
	}

	err = r.cartService.RemoveFromCart(userID, itemID)
	if err != nil {
		return false, fmt.Errorf("failed to remove from cart: %w", err)
	}

	return true, nil
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context) (*dto.OrderResponse, error) {
	userID, err := GetUserIDFromContext(ctx)
	if err != nil {
		return nil, ErrUnauthorized
	}

	order, err := r.orderService.CreateOrder(userID)
	if err != nil {
		return nil, fmt.Errorf("failed to create order: %w", err)
	}

	return order, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*dto.UserResponse, error) {
	userID, err := GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.userService.GetProfile(userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user profile: %w", err)
	}

	return user, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, page *int, limit *int) (*model.ProductConnection, error) {
	p, l := getPagingNumbers(page, limit)

	products, meta, err := r.productService.GetProducts(p, l)
	if err != nil {
		return nil, fmt.Errorf("failed to get products: %w", err)
	}

	edges := make([]*model.ProductEdge, len(products)) // allocate enough memory for all the products
	for i, product := range products {
		edges[i] = &model.ProductEdge{
			Node: &product,
		}
	}

	return &model.ProductConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			Page:       meta.Page,
			Limit:      meta.Limit,
			Total:      int(meta.Total),
			TotalPages: meta.TotalPages,
		},
	}, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*dto.ProductResponse, error) {
	productID, err := r.parseID(id)
	if err != nil {
		return nil, fmt.Errorf("invalid product ID: %w", err)
	}

	product, err := r.productService.GetProduct(productID)
	if err != nil {
		return nil, fmt.Errorf("failed to get product: %w", err)
	}

	return product, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*dto.CategoryResponse, error) {
	categories, err := r.productService.GetCategories()
	if err != nil {
		return nil, fmt.Errorf("failed to get categories: %w", err)
	}

	result := make([]*dto.CategoryResponse, len(categories))
	for i, cat := range categories {
		result[i] = &cat
	}

	return result, nil
}

// Cart is the resolver for the cart field.
func (r *queryResolver) Cart(ctx context.Context) (*dto.CartResponse, error) {
	userID, err := GetUserIDFromContext(ctx)
	if err != nil {
		return nil, ErrUnauthorized
	}

	cart, err := r.cartService.GetCart(userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get cart: %w", err)
	}

	return cart, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, page *int, limit *int) (*model.OrderConnection, error) {
	userID, err := GetUserIDFromContext(ctx)
	if err != nil {
		return nil, ErrUnauthorized
	}

	p, l := getPagingNumbers(page, limit)

	orders, meta, err := r.orderService.GetOrders(userID, p, l)
	if err != nil {
		return nil, fmt.Errorf("failed to get orders: %w", err)
	}

	edges := make([]*model.OrderEdge, len(orders))
	for i, order := range orders {
		edges[i] = &model.OrderEdge{
			Node: &order,
		}
	}

	return &model.OrderConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			Page:       meta.Page,
			Limit:      meta.Limit,
			Total:      int(meta.Total),
			TotalPages: meta.TotalPages,
		},
	}, nil
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*dto.OrderResponse, error) {
	userID, err := GetUserIDFromContext(ctx)
	if err != nil {
		return nil, ErrUnauthorized
	}

	orderID, err := r.parseID(id)
	if err != nil {
		return nil, fmt.Errorf("invalid order ID: %w", err)
	}

	order, err := r.orderService.GetOrder(userID, orderID)
	if err != nil {
		return nil, fmt.Errorf("failed to get order: %w", err)
	}

	return order, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
