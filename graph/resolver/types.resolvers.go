package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/joefazee/learning-go-shop/graph"
	"github.com/joefazee/learning-go-shop/internal/dto"
)

// ID is the resolver for the id field.
func (r *cartResolver) ID(ctx context.Context, obj *dto.CartResponse) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the user_id field.
func (r *cartResolver) UserID(ctx context.Context, obj *dto.CartResponse) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - user_id"))
}

// ID is the resolver for the id field.
func (r *cartItemResolver) ID(ctx context.Context, obj *dto.CartItemResponse) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *categoryResolver) ID(ctx context.Context, obj *dto.CategoryResponse) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *orderResolver) ID(ctx context.Context, obj *dto.OrderResponse) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the user_id field.
func (r *orderResolver) UserID(ctx context.Context, obj *dto.OrderResponse) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - user_id"))
}

// ID is the resolver for the id field.
func (r *orderItemResolver) ID(ctx context.Context, obj *dto.OrderItemResponse) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *productResolver) ID(ctx context.Context, obj *dto.ProductResponse) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CategoryID is the resolver for the category_id field.
func (r *productResolver) CategoryID(ctx context.Context, obj *dto.ProductResponse) (string, error) {
	panic(fmt.Errorf("not implemented: CategoryID - category_id"))
}

// ID is the resolver for the id field.
func (r *productImageResolver) ID(ctx context.Context, obj *dto.ProductImageResponse) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *dto.UserResponse) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Cart returns graph.CartResolver implementation.
func (r *Resolver) Cart() graph.CartResolver { return &cartResolver{r} }

// CartItem returns graph.CartItemResolver implementation.
func (r *Resolver) CartItem() graph.CartItemResolver { return &cartItemResolver{r} }

// Category returns graph.CategoryResolver implementation.
func (r *Resolver) Category() graph.CategoryResolver { return &categoryResolver{r} }

// Order returns graph.OrderResolver implementation.
func (r *Resolver) Order() graph.OrderResolver { return &orderResolver{r} }

// OrderItem returns graph.OrderItemResolver implementation.
func (r *Resolver) OrderItem() graph.OrderItemResolver { return &orderItemResolver{r} }

// Product returns graph.ProductResolver implementation.
func (r *Resolver) Product() graph.ProductResolver { return &productResolver{r} }

// ProductImage returns graph.ProductImageResolver implementation.
func (r *Resolver) ProductImage() graph.ProductImageResolver { return &productImageResolver{r} }

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type cartResolver struct{ *Resolver }
type cartItemResolver struct{ *Resolver }
type categoryResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type orderItemResolver struct{ *Resolver }
type productResolver struct{ *Resolver }
type productImageResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
